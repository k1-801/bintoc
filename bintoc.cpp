// C
#include <stdio.h>
#include <stdlib.h>
// C++
#include <string>

// Runtime configuration
bool help = false;
bool color = false;
bool verbose = false;
std::string fname;
std::string vname;

// Color flags are set on runtime if needed
const char* col_white   = "";
const char* col_default = "";
const char* col_red     = "";
const char* col_blue   = "";

void usage()
{
    printf("Usage:\n"
"    %s-f, --file <filename>:%s binary file to convert\n"
"    %s-V, --variable <name>:%s alternative variable name to store data\n"
"    %s-v, --verbose:%s         show more info\n"
"    %s-c, --color:%s           color output\n"
"    %s-h, --help:%s            show help\n"
"    Note that variable name should have only latin letters [A-Z,a-z], digits [0-9] (not the first character) or underlines '_'\n"
"    Default variable name is transformed file name\n",

    // This will color the output if needed
    col_white, col_default,
    col_white, col_default,
    col_white, col_default,
    col_white, col_default,
    col_white, col_default
    );
}

void error(const char* text)
{
    printf("%sError:%s %s%s\n", col_red, col_white, text, col_default);
    exit(EXIT_FAILURE);
}

void processArgs(int argc, char** argv)
{
    if(argc < 2)
        help = true;
    int i;
    for(i = 1; i < argc; ++i)
    {
        std::string curr = argv[i];
        if(curr == "-c" || curr == "--color")
        {
            color = true;
            continue;
        }
        if(curr == "-v" || curr == "--verbose")
        {
            verbose = true;
            continue;
        }
        if(curr == "-f" || curr == "--file")
        {
            if(i < argc - 1)
                fname = argv[++i];
            else
                error("File name expected");
            continue;
        }
        if(curr == "-V" || curr == "--variable")
        {
            if(i < argc - 1)
                vname = argv[++i];
            else
                error("Variable name expected");
            continue;
        }
    }
}

bool checksymbol(char c)
{
    return ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '_');
}

void convertFname()
{
    vname = "file_";
    unsigned int i;
    for(i = 0; i < fname.length(); ++i)
    {
        if(checksymbol(fname[i]))
            vname.push_back(fname[i]);
        else
            vname.push_back('_');
    }
}

void checkVname()
{
    if(vname.empty())
       error("Variable name is empty");
    if(vname[0] >= '0' && vname[0] <= '9')
        error("Digit cannot be the first character of variable name");
    unsigned int i;
    for(i = 0; i < vname.length(); ++i)
    {
        if(!checksymbol(vname[i]))
            error("Unallowed charracter in variable name");
    }
}

void process()
{
    FILE* in  = fopen(fname.c_str(), "r");
    if(!in)
        error("Failed to open input file");
    FILE* out = fopen((vname + ".c").c_str(), "w");
    if(!out)
        error("Failed to open output file");

    if(verbose)
        printf("%sCreating C file%s\n", col_blue, col_default);

    fprintf(out,
        "// This file was generated by bintoc utility\n"
        "// Binary data from file \"%s\"\n\n"
        "#include <stdint.h>\n\n"
        "uint8_t %s[] =\n"
        "{\n", fname.c_str(), vname.c_str());

    int16_t tmp;
    int fsize = 0;
    while((tmp = fgetc(in)) != -1)
    {
        fprintf(out, "    0x%02X,\n", (int)(tmp));
        ++fsize;
        if(fsize < 0)
            error("File is too big");
    }
    fprintf(out, "};\n\n"
        "int %s_size = %i;\n", vname.c_str(), fsize);

    fclose(in);
    fclose(out);

    if(verbose)
        printf("%sCreating C header file%s\n", col_blue, col_default);

    out = fopen((vname + ".h").c_str(), "w");
    fprintf(out,
        "// This file was generated by bintoc utility\n"
        "// Binary data from file \"%s\"\n\n"
        "#include <stdint.h>\n\n"
        "extern uint8_t %s[%i];\n"
        "extern int %s_size;", fname.c_str(), vname.c_str(), fsize, vname.c_str());
    fclose(out);
}

int main(int argc, char** argv)
{
    processArgs(argc, argv);
#ifdef linux
    if(color)
    {
        col_white   = "\e[1;37m";
        col_default = "\e[0m";
        col_red     = "\e[1;31m";
        col_blue    = "\e[1;34m";
    }
#endif
    if(help)
    {
        usage();
        exit(EXIT_SUCCESS);
    }
    if(fname.empty())
        error("No filename given");
    if(verbose)
        printf("%sInput file:%s %s\n", col_blue, col_default, fname.c_str());
    if(vname.empty())
        convertFname();
    else
        checkVname();
    if(verbose)
        printf("%sVariable name:%s %s\n", col_blue, col_default, vname.c_str());
    process();
    if(verbose)
        printf("%sSuccess!%s\n", col_blue, col_default);
    exit(EXIT_SUCCESS);
}
